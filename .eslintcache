[{"/home/cmgp/Desktop/REACT/todo/todo/src/index.js":"1","/home/cmgp/Desktop/REACT/todo/todo/src/App.js":"2","/home/cmgp/Desktop/REACT/todo/todo/src/reportWebVitals.js":"3","/home/cmgp/Desktop/REACT/todo/todo/src/components/Todo.js":"4","/home/cmgp/Desktop/REACT/todo/todo/src/components/TodoForm.js":"5","/home/cmgp/Desktop/REACT/todo/todo/src/components/TodoList.js":"6"},{"size":500,"mtime":1608073914176,"results":"7","hashOfConfig":"8"},{"size":184,"mtime":1608165577251,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608073914176,"results":"10","hashOfConfig":"8"},{"size":983,"mtime":1608328282016,"results":"11","hashOfConfig":"8"},{"size":689,"mtime":1608169195845,"results":"12","hashOfConfig":"8"},{"size":955,"mtime":1608248396811,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1kpyia7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/cmgp/Desktop/REACT/todo/todo/src/index.js",[],["28","29"],"/home/cmgp/Desktop/REACT/todo/todo/src/App.js",[],"/home/cmgp/Desktop/REACT/todo/todo/src/reportWebVitals.js",[],"/home/cmgp/Desktop/REACT/todo/todo/src/components/Todo.js",["30"],"import React, {useState} from 'react'\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport '../App.css'\n\nfunction Todo({todos,removeTodo,completeTodo}) {\n    const [edit, setEdit] = useState({\n        id:null,\n        value:''\n    });\n\n    if(!todos[0]){\n        return <h1>Vacio</h1>\n    }else{\n        return todos.map(\n            (e,i)=>{\n                return (\n                <div className={e.isComplete?'todo-row complete' : 'todo-row'}>\n                    <div onClick={()=>{completeTodo(e.id)}}>\n                        {e.text}\n                    </div>\n                    <div className='icons'>\n                        <RiCloseCircleLine onClick={()=>{removeTodo(e.id)}} className='delete-icon'/>\n                        <TiEdit onClick={() => setEdit({ id: e.id, value: e.text })} className='edit-icon' />\n                    </div>\n                </div>)\n            }\n        );\n    }\n\n    \n}\n\nexport default Todo\n","/home/cmgp/Desktop/REACT/todo/todo/src/components/TodoForm.js",[],"/home/cmgp/Desktop/REACT/todo/todo/src/components/TodoList.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":7,"column":12,"nodeType":"37","messageId":"38","endLine":7,"endColumn":16},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'edit' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]